Tasks
LACP on all servers - start with dev
	- when nms1/6 ready, look in SN for "remote" and then uto server installation

TurningPoint 
	=> correct permissions (775) on the dylib
	- set permissions in FixMe 
	- set permissions in commonImageConfigure-specialSoftwareConfigure.sh

Dev,Deskside, and more software automation
	- backup macmgmt.inre.asu.edu
	* setup Munki and associated tools
		* https://github.com/munki/munki
		* curl https://munkibuilds.org/latest2.sh | sh
		OR
		* https://github.com/autopkg/recipes/blob/master/munkitools/munkitools2.munki.recipe

		* Munki-in-a-box https://github.com/tbridge/munki-in-a-box
		* MunkiAdmin https://github.com/hjuutilainen/munkiadmin
		* MunkiReport https://github.com/munkireport/munkireport-php
		* apache vhost setup => https://github.com/munkireport/munkireport-php/blob/master/docs/setup.md
	* verify AutoPkg is working
		* http://autopkg.github.io/autopkg/
		* repo loc: /Users/ahlbetsroff/Library/AutoPkg/RecipeRepos/com.github.autopkg.recipes
	* update AutoPkg recipes and import into Munki	
		- https://github.com/autopkg/autopkg/wiki/Recipe-Format
	* setup munki on a client
		* macbookair
		- need to do the following things for client setup:
			- install munkitools
			- modify defaults 
				=> sudo defaults write /Library/Preferences/ManagedInstalls SoftwareRepoURL "https://macmgmt.inre.asu.edu/munki_repo"
				=> sudo defaults write /Library/Preferences/ManagedInstalls ClientIdentifier "nameOfManifest"
					- change manifest name to appropriate name ("test_devRoom_software" for dev room)
			- add munki server cert to system keychain
				=> sudo /usr/bin/security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" /path/to/Cert.cert
	* add munki setup script => general-setupMunki.sh
		* all COMMON dev room machines
		* deskside test workflow
		* common test workflow
		* package and/or script the following files:
			* /Libary/Preferences/ManagedInstalls.plist
			* /Libary/Preferences/Munkireport.plist
			* munkireport
			* munkitools_app
			* munkitools_core
			* munkitools_launchd
			* munkiserver certificate
		* begin as separate bash (not tcsh) script, postponed action => later integrate 
		- test
			* deskside
			- common
	- munki & SUS?
	- add server manifest
		- keep software up-to-date on which servers?
	- munkireport and FV2?
		- OR something like https://github.com/grahamgilbert/Crypt
		- OR https://derflounder.wordpress.com/2013/04/29/filevault-setup-app-local-filevault-2-encryption-setup-and-enforcement/

Add suspicious package and/or other dev tools to AutoPkg
	- create recipes for SP (.download and .munki)

Check general-deleteFilevault.sh script to see if any workflows are calling
	- if not, then delete script

What to do with Xserves?
	- server setup automation
		- what to use?
			- script, Chef, Puppet, etc.?
	- macnms 8/9? OR macnms1a / macnms3a
	- tech studio?
	- 2nd server for Poly?
		- mod to Netboot Helper
			- Poly 1, Poly 2
			- Tempe 1, Tempe 2
			- $campus 2, other than COMMON selection go to $campus Deskside server
		- can two multicasts sessions coexist on Poly's flat network?
		- (2) more OS X Server licenses?
		- replace boot drives with SSDs
		- add 3rd drive (1TB spinning platter, full backup of data drive + boot drive backup)
		- stagger DS syncing times

tech studio DS setup?
	- what hardware?
	- how to isolate network interfaces
	- needs
	- separate tech studio DS group
	- separate tech studio workflow(s)
	
Logical volume check for DS workflows
	- what workflow(s)?
		- all Deskside?
		- all Common?

SILC printers config 
	* specifics?
		* IP: 129.219.150.227
		* HP LaserJet600 M603
		* RAM 512MB
		* Duplex w/ front + rear output bins
		* HP PostScript v 19.9
	* need PaperCut account
	* add to SILC departmental script
		* printers are installed via printers script
		* copy PCClient app into /Applications, 775
		* copy loginitems into user Library/Preferences (has Smartboard + papercut client)
	* modify loginscriptLoader.sh to call last IF silc customer and IF script present in place of PaperCut's loginhook
		=> nope, try loginitem (works)
	* test
	* push to production:
		* silc application files
		* silc printer files
		* silc department config script
	
Network configure script errors
	* check cases
	- ready for case testing:
		- iMac
		- mini
		- macbookair
		- macbookpro
		- macpro

check /var/folders cleanout at shutdown script!
	* definitely running on nightly shutdown
	- may need to modify partition size upper limit in order for better functionality

SILC app Antidote

DS reporting using our log files app

Bootpicker and Yosemite
	- alternatives?
		- BootRunner?
		- reFind?

Yosemite COMMON image
	- things that don't work...
		- setup assistant (/var/db/.AppleSetupDone) is still not being written/kept => ready for test

Make new Yosemite vanilla image
	* OS 10.10.2
	* use AutoDMG
	* test
	- push into production?

vmware esxi - see http://blog.newrelic.com/2014/06/12/turning-mac-minis-agile-mac-os-x-esxi-hosts-getting-baremetal/